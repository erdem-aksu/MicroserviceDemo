@page "/contacts"
@using MicroserviceDemo.ContactService.Contacts
@using MicroserviceDemo.Web.Helpers
@using Microsoft.AspNetCore.Components
@using MicroserviceDemo.ContactService
@inherits WebPageBase

<MudToolBar Class="my-2">
    <div>
        <MudText Typo="Typo.h5">@L["Contacts"]</MudText>
        @if (BreadcrumbItems.Count > 0)
        {
            <MudBreadcrumbs Class="pa-0" MaxItems="4" Items="@BreadcrumbItems"></MudBreadcrumbs>
        }
    </div>
    <MudSpacer/>
    @if (HasCreatePermission)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Create" OnClick="@OpenCreateModalAsync">@L["NewContact"]</MudButton>
    }
</MudToolBar>
<MudContainer MaxWidth="MaxWidth.False" Class="mb-6">
    <MudPaper Class="relative overflow-hidden">
        <MudOverlay Visible="@IsGridLoading" LightBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
        </MudOverlay>

        <MudDataGrid @ref="Grid" T="ContactListDto" ServerData="ReadGridData" SortMode="SortMode.Multiple" Hideable="true">
            <ToolBarContent>
                <MudTextField @bind-Value="SearchText" Placeholder="@L["Search"]" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 ml-auto flex-grow-0"></MudTextField>
                <MudIconButton Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Filled.Refresh" OnClick="@Grid.ReloadServerData" Class="mt-3 ml-2">@L["Refresh"]</MudIconButton>
            </ToolBarContent>
            <Columns>
                <Column T="ContactListDto" Field="@nameof(ContactListDto.Id)" Hidden="true" Sortable="false" Filterable="false"/>
                <Column T="ContactListDto" Field="@nameof(ContactListDto.Name)" Title="@L["Name"]"/>
                <Column T="ContactListDto" Field="@nameof(ContactListDto.SurName)" Title="@L["SurName"]"/>
                <Column T="ContactListDto" Field="@nameof(ContactListDto.Company)" Title="@L["Company"]"/>
                <Column T="ContactListDto" Field="@nameof(ContactListDto.CreationTime)" Title="@L["CreationTime"]" Sortable="true"/>
                <Column T="ContactListDto">
                    <CellTemplate>
                        <MudMenu EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="@L["Actions"]" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" Dense="true" AnchorOrigin="Origin.BottomLeft">
                            @if (HasUpdatePermission)
                            {
                                <MudMenuItem OnClick="@(() => OpenEditModalAsync(context.Item))">@L["Edit"]</MudMenuItem>
                            }
                            @if (HasDeletePermission)
                            {
                                <MudMenuItem OnClick="@(() => DeleteEntityAsync(context.Item))">@L["Delete"]</MudMenuItem>
                            }
                        </MudMenu>
                    </CellTemplate>
                </Column>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="ContactListDto"/>
            </PagerContent>
        </MudDataGrid>
    </MudPaper>
</MudContainer>

@if (HasCreatePermission)
{
    <MudDialog @ref="CreateModal" @bind-IsVisible="IsCreateModalVisible">
        <DialogContent>
            <MudForm Model="@NewEntity" @ref="@CreateForm">
                <MudTextField @bind-Value="@NewEntity.Name" Label="@L["Name"]" Validation="@(ContactCreateDtoValidator.ValidateValue())" For="@(() => NewEntity.Name)"></MudTextField>
                <MudTextField @bind-Value="@NewEntity.SurName" Label="@L["SurName"]" Validation="@(ContactCreateDtoValidator.ValidateValue())" For="@(() => NewEntity.SurName)"></MudTextField>
                <MudTextField @bind-Value="@NewEntity.Company" Label="@L["Company"]" Validation="@(ContactCreateDtoValidator.ValidateValue())" For="@(() => NewEntity.Company)"></MudTextField>

                <MudField Variant="Variant.Outlined" Label="@L["ContactInfo"]" Class="mt-4">
                    <MudButtonGroup OverrideStyles="false" Class="mb-2">
                        <MudButton Color="Color.Primary" OnClick="@(() => NewEntity.Info.Add(new ContactInfoCreateOrUpdateDto()))">@L["Add"]</MudButton>
                    </MudButtonGroup>

                    @foreach (var info in NewEntity.Info.ToList())
                    {
                        <div class="d-flex mb-2">
                            <MudSelect T="ContactInfoType" Label="@L["ContactInfoType"]" @bind-Value="@info.Type" Validation="@(ContactCreateDtoValidator.ValidateValue())" For="@(() => info.Type)">
                                @foreach (var type in Enum.GetValues<ContactInfoType>())
                                {
                                    <MudSelectItem Value="type">@UiTextFormatter.Format(type, L)</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField @bind-Value="@info.Value" Label="@L["ContactInfoValue"]" Class="ml-2" Validation="@(ContactCreateDtoValidator.ValidateValue())" For="@(() => info.Value)" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Delete" AdornmentColor="Color.Error" OnAdornmentClick="@(() => NewEntity.Info.Remove(info))"></MudTextField>
                        </div>
                    }
                </MudField>
            </MudForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CloseCreateModal">@L["Cancel"]</MudButton>
            <MudButton Color="Color.Primary" OnClick="CreateEntityAsync">@L["Create"]</MudButton>
        </DialogActions>
    </MudDialog>
}

@if (HasUpdatePermission)
{
    <MudDialog @ref="EditModal" @bind-IsVisible="IsEditModalVisible">
        <DialogContent>
            <MudForm Model="@EditingEntity" @ref="@EditForm">
                <MudTextField @bind-Value="@EditingEntity.ConcurrencyStamp" InputType="InputType.Hidden" Class="d-none"/>
                <MudTextField @bind-Value="@EditingEntity.Name" Label="@L["Name"]" Validation="@(ContactUpdateDtoValidator.ValidateValue())" For="@(() => NewEntity.Name)"></MudTextField>
                <MudTextField @bind-Value="@EditingEntity.SurName" Label="@L["SurName"]" Validation="@(ContactUpdateDtoValidator.ValidateValue())" For="@(() => NewEntity.SurName)"></MudTextField>
                <MudTextField @bind-Value="@EditingEntity.Company" Label="@L["Company"]" Validation="@(ContactUpdateDtoValidator.ValidateValue())" For="@(() => NewEntity.Company)"></MudTextField>

                <MudField Variant="Variant.Outlined" Label="@L["ContactInfo"]" Class="mt-4">
                    <MudButtonGroup OverrideStyles="false" Class="mb-2">
                        <MudButton Color="Color.Primary" OnClick="@(() => EditingEntity.Info.Add(new ContactInfoCreateOrUpdateDto()))">@L["Add"]</MudButton>
                    </MudButtonGroup>

                    @foreach (var info in EditingEntity.Info.ToList())
                    {
                        <div class="d-flex mb-2">
                            <MudSelect T="ContactInfoType" Label="@L["ContactInfoType"]" @bind-Value="@info.Type" Validation="@(ContactUpdateDtoValidator.ValidateValue())" For="@(() => info.Type)">
                                @foreach (var type in Enum.GetValues<ContactInfoType>())
                                {
                                    <MudSelectItem Value="type">@UiTextFormatter.Format(type, L)</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField @bind-Value="@info.Value" Label="@L["ContactInfoValue"]" Class="ml-2" Validation="@(ContactUpdateDtoValidator.ValidateValue())" For="@(() => info.Value)" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Delete" AdornmentColor="Color.Error" OnAdornmentClick="@(() => EditingEntity.Info.Remove(info))"></MudTextField>
                        </div>
                    }
                </MudField>
            </MudForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CloseEditModal">@L["Cancel"]</MudButton>
            <MudButton Color="Color.Primary" OnClick="UpdateEntityAsync">@L["Update"]</MudButton>
        </DialogActions>
    </MudDialog>
}